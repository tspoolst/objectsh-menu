#!/bin/ksh

#[of]:menu
#[of]:static methods
#[of]:function menu.staticconstructor {
function menu.staticconstructor {
#[of]:  function menu.getstats {
function menu.getstats {
#[c]object
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    ${ov}itemPositions.getsize -
    ${ov}itemPositions.keys -
    ${ov}itemPositions.nodes -
    ${ov}itemPositions.dumpraw
    return 0
  "
}
#[cf]
#[of]:  function menu.drawhborder {
function menu.drawhborder {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset j
    ${c}.setcursorxy ${d}1 ${d}2
    for ((j=0;j<${ov}width;j++)) ; do
      echo -n '*'
    done

    return 0
  "
}
#[cf]
#[of]:  function menu.settitle {
function menu.settitle {
#[c]object
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    ${ov}title=${q}${d}1${q}
    return 0
  "
}
#[cf]
#[of]:  function menu.additem {
function menu.additem {
#[c]object
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset _type _hotkey _name _prog _id
    _type=${q}${d}1${q}
    _hotkey=${q}${d}2${q}
    _name=${q}${d}3${q}
    _prog=${q}${d}4${q}

#[c]    ${ov}itemIdPool.getid _id

    new menuitem ${ov}item${d}{${ov}totalitems}
    ${ov}item${d}{${ov}totalitems}.settype ${q}${d}{_type}${q}
    ${ov}item${d}{${ov}totalitems}.sethotkey ${q}${d}{_hotkey}${q}
    [[ -n ${q}${d}{_hotkey}${q} ]] && \
      ${ov}hotkeys.setkey ${q}${d}{_hotkey}${q} ${d}{${ov}totalitems}
    ${ov}item${d}{${ov}totalitems}.setname ${q}${d}{_name}${q}
    ${ov}item${d}{${ov}totalitems}.setprog ${q}${d}{_prog}${q}
    
    ((++${ov}totalitems))
  
    return 0
  "
}
#[cf]
#[of]:  function menu.delitem {
#[c]  function menu.delitem {
#[c]  }
#[cf]
#[of]:  function menu.updateItemName {
#[c]  function menu.updateItemName {
#[c]  }
#[cf]
#[of]:  function menu.updateItemProg {
#[c]  function menu.updateItemProg {
#[c]  }
#[cf]
#[of]:  function menu.incselecteditem {
function menu.incselecteditem {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset ${omv}nextitem
    ${omv}nextitem=${d}((${ov}selecteditem+1))

    if ((${omv}nextitem==${ov}totalitems)) ; then
      ${ov}selecteditem=0
    else
      while ((${omv}nextitem<${ov}totalitems)) ; do
        ${ov}item${d}((${omv}nextitem)).isselectable && {
          ${ov}selecteditem=${d}{${omv}nextitem}
          break
        }
        ((++${omv}nextitem))
      done
    fi

    return 0
  "
}
#[c]if next item is > totalitems then selecteditem=0
#[cf]
#[of]:  function menu.decselecteditem {
function menu.decselecteditem {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset ${omv}previtem
    ${omv}previtem=${d}{${ov}selecteditem}

    if ((${omv}previtem==0)) ; then
      ${ov}selecteditem=${d}((${ov}totalitems-1))
    else
      while ((${omv}previtem>0)) ; do
        ${ov}item${d}((${omv}previtem-1)).isselectable && {
          ${ov}selecteditem=${d}((${omv}previtem-1))
          break
        }
        ((--${omv}previtem))
      done
    fi

    return 0
  "
}
#[cf]
#[of]:  function menu.open {
function menu.open {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset i _key _mouse _mouseEvent _selecteditem
    typeset ${omv}name
#[c]    typeset ${omv}prog
    ${ov}enter=1
    ${ov}selecteditem=0

#[of]:    check if submenu
    [[ ${q}${d}{FUNCNAME[2]}${q} = ${q}menu.open${q} ]] && ${ov}submenu=1 || ${ov}submenu=0
#[cf]

#[c]    trap ${q}echo TRAPed signal;sleep 2;${d}{gl_progname}${q} INT
#[c]    HUP INT QUIT KILL TERM

#[of]:    calc top/left/width
#[c]    ${ov}width=12
#[c]    [[ ${d}{#${ov}title} -gt ${d}{${ov}width} ]] && ${ov}width=${d}{#${ov}title}
#[c]    for ((i=0;i<${d}{${ov}totalitems};i++)) ; do
#[c]      ${ov}item${d}{i}.getname ${omv}name
#[c]      [[ ${d}{#${omv}name} -gt ${d}{${ov}width} ]] && ${ov}width=${d}{#${omv}name}
#[c]    done
#[c]    ((${ov}width+=9))
#[c]    ${ov}left=${d}((${cv}width/2-${ov}width/2))
#[c]    ${ov}top=${d}((${cv}height/2-(${ov}totalitems+4)/2))
#[cf]
#[c]    ${c}.calcscreensize

    ${c}.mouseEnable
    ${c}.calcscreensize
    ${o}.refresh
#[of]:    key process loop
    while read -s -N 1 -r _key ; do
      case ${q}${d}{_key}${q} in
#[of]:        escaped keys
        ${d}'\E')
          read -s -N 2 -r -t .1 _key || {
#[of]:            esc
#[c]            esc itself is just a single char
#[c]            if read timeout is reached the key must be esc
            break
#[cf]
          }
          [[ ${q}${d}{_key}${q} == '[1' ]] && read -s -N 3 -r -t .1 _key
          case ${q}${d}{_key}${q} in
#[of]:            mouse
            '[<')
              _mouse=${q}${q}
              while read -s -N 1 -r _key ; do
                [[ ${q}${d}{_key}${q} =~ (M|m) ]] && break
                _mouse=${q}${d}{_mouse}${d}{_key}${q}
              done

              [[ ${q}${d}{_key}${q} == ${q}M${q} ]] && _key=${q}down${q} || _key=${q}up${q}
              _mouseEvent=( ${d}{_mouse//;/ } _ ${d}{_key} )

              [[ ${q}${d}{_mouseEvent[0]}${q} == 0 ]] && _mouseEvent[3]=${q}button_left${q}
              [[ ${q}${d}{_mouseEvent[0]}${q} == 1 ]] && _mouseEvent[3]=${q}button_middle${q}
              [[ ${q}${d}{_mouseEvent[0]}${q} == 2 ]] && _mouseEvent[3]=${q}button_right${q}

#[of]:              left button click
              if [[ ${q}${d}{_mouseEvent[0]}${q} == 0 && ${q}${d}{_mouseEvent[4]}${q} == ${q}up${q} ]] ; then
                if (( (${ov}left-1)<_mouseEvent[1] && _mouseEvent[1]<(${ov}left+${ov}width) )) && \
                  (( (${ov}top-1)<_mouseEvent[2] && _mouseEvent[2]<(${ov}bottom+1) )) ; then
                    if ${ov}itemPositions.getkey _selecteditem ${q}${d}{_mouseEvent[2]}${q} ; then

                      if [[ ${q}${d}{_selecteditem}${q} == ${q}select${q} ]] ; then
                        if (( (${ov}left+(${ov}width/2)-7)<_mouseEvent[1] && _mouseEvent[1]<(${ov}left+(${ov}width/2)) )) ; then
                          :
                        elif (( (${ov}left+(${ov}width/2)+2)<_mouseEvent[1] && _mouseEvent[1]<(${ov}left+(${ov}width/2)+7) )) ; then
                          break
                        else
                          continue
                        fi
                      else
                        ${ov}selecteditem=${q}${d}{_selecteditem}${q}
                      fi

#[c]                      echo yes ${q}${d}${ov}selecteditem${q}
                      {
                        ${c}.mouseDisable
                        ${ov}item${d}((${ov}selecteditem)).runprog
                        ${c}.mouseEnable
                        ${ov}enter=1
                        ${c}.calcscreensize
                        ${o}.refresh
                      }
                    fi
                else
                  echo ${q}no ${d}${ov}selecteditem -- ${d}{_mouseEvent[@]}${q}
#[c]                  {
#[c]                    ${c}.mouseDisable
#[c]                    ${ov}item${d}((${ov}selecteditem)).runprog
#[c]                    ${c}.mouseEnable
#[c]                    ${ov}enter=1
#[c]                    ${o}.refresh
#[c]                  }
                fi
              fi
#[cf]
#[of]:              middle button click
              [[ ${q}${d}{_mouseEvent[0]}${q} == 1 ]] && _mouseEvent[3]=${q}button_middle${q}
#[cf]
#[of]:              right button click
              if [[ ${q}${d}{_mouseEvent[0]}${q} == 2 && ${q}${d}{_mouseEvent[4]}${q} == ${q}up${q} ]] ; then
                break
              fi
#[cf]

#[of]:              scroll up
              if [[ ${q}${d}{_mouseEvent[0]}${q} == 64 ]] ; then
#[c]                _mouseEvent[3]=${q}scroll${q}
#[c]                _mouseEvent[4]=${q}up${q}
                ${o}.decselecteditem
                ${o}.refresh
              fi
#[cf]
#[of]:              scroll down
              if [[ ${q}${d}{_mouseEvent[0]}${q} == 65 ]] ; then
#[c]                _mouseEvent[3]=${q}scroll${q}
#[c]                _mouseEvent[4]=${q}down${q}
                ${o}.incselecteditem
                ${o}.refresh
              fi
#[cf]
#[c]              echo ${q}${d}{_mouseEvent[@]}---mouse${q}
              ;;
#[cf]
#[of]:            shift up)
            '[a'|';2A')
              echo shift up
              ;;
#[cf]
#[of]:            shift down)
            '[b'|';2B')
              echo shift down
              ;;
#[cf]
#[of]:            shift left)
            '[d'|';2D')
              echo shift left
              ;;
#[cf]
#[of]:            shift right)
            '[c'|';2C')
              echo shift right
              ;;
#[cf]
#[of]:            up)
            '[A')
              ${o}.decselecteditem
              ${o}.refresh
              ;;
#[cf]
#[of]:            down)
            '[B')
              ${o}.incselecteditem
              ${o}.refresh
              ;;
#[cf]
#[of]:            left)
            '[D')
              ${ov}enter=1
              ${o}.refresh
              ;;
#[cf]
#[of]:            right)
            '[C')
              ${ov}enter=0
              ${o}.refresh
              ;;
#[cf]
#[of]:            *)
            *)
              echo ${q}ascii ---${d}{_key}---esc${q}
              ;;
#[cf]
          esac
          ;;
#[cf]
#[of]:        q)
        q)
          break
          ;;
#[cf]
#[of]:        enter)
        '
')
          ((${ov}enter)) && {
            ${c}.mouseDisable
            ${ov}item${d}((${ov}selecteditem)).runprog
#[c]            ${ov}item${d}((${ov}selecteditem)).getprog ${omv}prog
#[c]            [[ -n ${q}${d}{${omv}prog}${q} ]] && eval ${q}${d}{${omv}prog}${q}
#[c]            if [[ -n ${q}${d}{${omv}prog}${q} ]] ; then
#[c]              trap ${q}echo TRAPed signal${q} INT
#[c]              eval ${q}${d}{${omv}prog}${q}
#[c]              trap - INT
#[c]            fi
            ${c}.mouseEnable
            ${ov}enter=1
            ${c}.calcscreensize
            ${o}.refresh
          } || break
          ;;
#[cf]
#[of]:        *)
        *)
          if ${ov}hotkeys.getkey _item ${q}${d}{_key}${q} ; then
            ${ov}selecteditem=${d}{_item}
            ${c}.mouseDisable
            ${ov}item${d}((${ov}selecteditem)).runprog
            ${c}.mouseEnable
            ${ov}enter=1
            ${c}.calcscreensize
            ${o}.refresh
          else
            echo ${q}ascii ---${d}{_key}---chr${q}
          fi 
          ;;
#[cf]
      esac
    done
#[cf]
    ${c}.mouseDisable

    echo
    return 0
  "
}
#[c]SET_COL="echo -en \\033[${gl_colstatus}G"
#[c]SET_WCOL="echo -en \\033[${WCOL}G"
#[c]CURS_UP="echo -en \\033[A"
#[c]gl_gray="echo -en \\033[0;39m"
#[c]gl_green="echo -en \\033[1;32m"
#[c]gl_yellow="echo -en \\033[1;33m"
#[c]gl_red="echo -en \\033[1;31m"
#[cf]
#[of]:  function menu.calcTopLeft {
function menu.calcTopLeft {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset i ${omv}name

    ${ov}width=12
    [[ ${d}{#${ov}title} -gt ${d}{${ov}width} ]] && ${ov}width=${d}{#${ov}title}
    for ((i=0;i<${d}{${ov}totalitems};i++)) ; do
      ${ov}item${d}{i}.getname ${omv}name
      [[ ${d}{#${omv}name} -gt ${d}{${ov}width} ]] && ${ov}width=${d}{#${omv}name}
    done
    ((${ov}width+=9))
    ${ov}left=${d}((${cv}width/2-${ov}width/2+1))
    ${ov}top=${d}((${cv}height/2-(${ov}totalitems+4)/2))
#[c]
    (( ${cv}height < (${ov}totalitems+4) )) && {
      ${c}.setScreenHeight $((${ov}totalitems+8)) && ${o}.calcTopLeft
      ${ov}firstrun=${q}true${q}
      echo -e ${q}\\a${q};sleep .6
    }
    (( ${cv}width < (${ov}width+1) )) && {
      ${c}.setScreenWidth $((${ov}width+2)) && ${o}.calcTopLeft
      ${ov}firstrun=${q}true${q}
      echo -e ${q}\\a${q};sleep .6
    }
#[c]
    return 0
  "
}
#[c]SET_COL="echo -en \\033[${gl_colstatus}G"
#[c]SET_WCOL="echo -en \\033[${WCOL}G"
#[c]CURS_UP="echo -en \\033[A"
#[c]gl_gray="echo -en \\033[0;39m"
#[c]gl_green="echo -en \\033[1;32m"
#[c]gl_yellow="echo -en \\033[1;33m"
#[c]gl_red="echo -en \\033[1;31m"
#[cf]
#[of]:  function menu.refresh {
function menu.refresh {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset i j _vpositon _exitmsg
    typeset ${omv}type ${omv}hotkey ${omv}name ${omv}prog

    ${o}.calcTopLeft
#[c]    ${ov}itemPositions.getsize ! && ${ov}firstrun=${q}false${q} || ${ov}firstrun=${q}true${q}
    ${ov}firstrun=${q}true${q}

    clear

    _vpositon=${d}{${ov}top}
    ${o}.drawhborder ${d}{${ov}left} ${d}((_vpositon++))
#[of]:    draw title
    ${c}.setcursorxy ${d}{${ov}left} ${d}((_vpositon))
    echo -n '*'

    ${c}.setcursorxy ${d}((${ov}left+(${ov}width/2)-${d}{#${ov}title}/2)) ${d}((_vpositon))

    echo -n ${q}${d}{${ov}title}${q}
    ${c}.setcursorxy ${d}((${ov}left+${ov}width-1)) ${d}((_vpositon++))
    echo -n '*'
#[cf]
    ${o}.drawhborder ${d}((${ov}left)) ${d}((_vpositon++))
#[of]:    draw items
    for ((i=0;i<${ov}totalitems;i++)) ; do
      ${c}.setcursorxy ${d}((${ov}left)) ${d}((_vpositon+i))
#[c]      echo -n ${q}${d}{i}${d}{${ov}totalitems}${q}

      ${ov}item${d}{i}.gettype ${omv}type
#[c]      echo -en ${q}${d}{${omv}type}${q}

      echo -n '*'
      ((i==${ov}selecteditem)) && echo -en ${q}\\033[7m${q}
      case ${d}{${omv}type} in
#[of]:        spacer)
        spacer)
          for ((j=0;j<${ov}width-2;j++)) ; do
            echo -en '-'
          done
          ;;
#[cf]
#[of]:        action|*)
        action|*)
          ${ov}item${d}{i}.gethotkey ${omv}hotkey
          ${ov}item${d}{i}.getname ${omv}name
          while ((${d}{#${omv}name}<${ov}width-7)) ; do
            ${omv}name=${q}${d}{${omv}name} ${q}
          done
          ${d}{${ov}firstrun} && ${ov}itemPositions.setkey ${q}${d}((_vpositon+i))${q} ${q}${d}{i}${q}
          echo -n ${q}  ${d}{${omv}hotkey:- }. ${d}{${omv}name}${q}
          ;;
#[cf]
      esac
      ((i==${ov}selecteditem)) && echo -en ${q}\\033[0m${q}
      echo -n '*'
    done
    ((_vpositon+=i))
#[cf]
    ${o}.drawhborder ${d}{${ov}left} ${d}((_vpositon++))
#[of]:    draw enter/exit toggle
    ((${ov}submenu)) && _exitmsg=back || _exitmsg=done

    ${c}.setcursorxy ${d}{${ov}left} ${d}((_vpositon))
    ${d}{${ov}firstrun} && ${ov}itemPositions.setkey ${q}${d}((_vpositon))${q} ${q}select${q}
    echo -n '*'
    ${c}.setcursorxy ${d}((${ov}left+(${ov}width/2)-6)) ${d}((_vpositon))
      ((${ov}enter)) && {
        echo -en ${q}\\033[7mselect\\033[0m   ${d}{_exitmsg}${q}
      } || {
        echo -en ${q}select   \\033[7m${d}{_exitmsg}\\033[0m${q}
      }
    ${c}.setcursorxy ${d}((${ov}left+${ov}width-1)) ${d}((_vpositon++))
    echo -n '*'

#[cf]
    ${o}.drawhborder ${d}{${ov}left} ${d}((_vpositon))
    ${ov}bottom=${d}{_vpositon}
    return 0
  "
}
#[c]    map top left of menu to screen
#[c]      screenheight/2-height/2
#[c]      screenwidth/2-width/2
#[c]      position cursor
#[c]    draw menu
#[c]      top border
#[c]      border,space,active,space,hotkey,.,space,name,space,border
#[c]      bottom border
#[c]spacer/toggle/action/menu
#[cf]
#[of]:  function menu.run_item_by_name {
function menu.run_item_by_name {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset _name
    _name=${q}${d}1${q}

    typeset i j  _exitmsg
    typeset ${omv}name

    for ((i=0;i<${ov}totalitems;i++)) ; do
      ${ov}item${d}{i}.getname ${omv}name
      if [[ ${q}${d}{${omv}name}${q} == ${q}${d}{_name}${q} ]] ; then
        ${ov}item${d}{i}.runprog
        break
      fi
    done

    return 0
  "
}
#[cf]
#[of]:  function menu.list_runnable_items_by_name {
function menu.list_runnable_items_by_name {
#[c]object -|var
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
    typeset _name
    _name=${q}${d}1${q}

    typeset i j  _exitmsg
    typeset ${omv}name

    for ((i=0;i<${ov}totalitems;i++)) ; do
      ${ov}item${d}{i}.getname ${omv}name
      ${ov}item${d}{i}.hasprog && echo ${q}${d}${omv}name${q}
    done

    return 0
  "
}
#[cf]
}
#[cf]
#[cf]
#[of]:class methods
#[of]:function menu.classconstructor {
function menu.classconstructor {
#[c]object
#[of]:  includes
  include hash
#[c]  include referenceid
#[cf]
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
#[of]:    function ${c}.calcscreensize {
function ${c}.calcscreensize {
  set -- ${d}(stty size 2>/dev/null)
  ${cv}height=${d}1
  ${cv}width=${d}2
  [[ -z ${q}${d}{${cv}height}${q} ]] && {
    ${cv}height=24
    ${cv}width=80
  }
#[c]  echo ${d}{${cv}height} ${d}{${cv}width}
#[c]  read -n 1
  return 0
}
#[cf]
#[of]:    function ${c}.setScreenHeight {
function ${c}.setScreenHeight {
  #to get the resize command
  #sudo apt install xterm
  typeset _height
  
  if isset TERM && [[ -z "${d}{TERM##xterm*}" ]] && which resize &>/dev/null ; then
    _height=${d}1
    resize -s ${d}{_height} ${d}{${cv}width} &>/dev/null || return 1
    ${cv}height=${d}{_height}
  else
    return 1
  fi
  return 0
}
#[cf]
#[of]:    function ${c}.setScreenWidth {
function ${c}.setScreenWidth {
  #to get the resize command
  #sudo apt install xterm
  typeset _width

  if isset TERM && [[ -z "${d}{TERM##xterm*}" ]] && which resize &>/dev/null ; then
    _width=${d}1
    resize -s ${d}{${cv}height} ${d}{_width} &>/dev/null || return 1
    ${cv}width=${d}{_width}
  else
    return 1
  fi
  return 0
}
#[cf]
#[of]:    function ${c}.setcursorxy {
function ${c}.setcursorxy {
  typeset _x _y
  _x=${d}1
  _y=${d}2
  echo -en ${q}\\\\033[${d}{_y};${d}{_x}H${q}
  return 0
}
#[cf]
#[of]:    function ${c}.mouseEnable {
function ${c}.mouseEnable {
  stty -echo
  echo -en '\e[?1000;1006;1015h'
}
#[cf]
#[of]:    function ${c}.mouseDisable {
function ${c}.mouseDisable {
  stty echo
  echo -en '\e[?1000;1001;1002;1003;1006;1015l'
}
#[cf]
#[of]:    class data
newvar ${cv}height ${cv}width
#[cf]
    ${c}.calcscreensize
  "
}
#[cf]
#[cf]
#[of]:dynamic methods
#[of]:function menu.constructor {
function menu.constructor {
#[c]object
#[of]:set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  #echo constructing object ${o} of class ${c}
  eval "
#[of]:    object data
newvar ${ov}submenu ${ov}title ${ov}totalitems ${ov}selecteditem ${ov}enter
newvar ${ov}top ${ov}bottom ${ov}left ${ov}width
newvar ${ov}firstrun

${ov}firstrun=${q}true${q}
${ov}title=${q}empty title${q}

#[c]new referenceid ${ov}itemIdPool
${ov}totalitems=0

new hash ${ov}hotkeys
new hash ${ov}itemPositions
#[cf]
  "
}
#[cf]
#[cf]
#[cf]
#[of]:menuitem
#[of]:static methods
#[of]:function menuitem.staticconstructor {
function menuitem.staticconstructor {
#[of]:  function menuitem.runprog {
function menuitem.runprog {
#[c]object
#[of]:  set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  eval "
#[c]    [[ -n ${q}${d}{${ov}prog}${q} ]] && eval ${q}${d}{${ov}prog}${q}
    if [[ -n ${q}${d}{${ov}prog}${q} ]] ; then
      trap ${q}echo TRAPed signal${q} INT
      eval ${q}${d}{${ov}prog}${q}
      trap - INT
    fi
  "
}
#[cf]
}
#[cf]
#[cf]
#[of]:dynamic methods
#[of]:function menuitem.constructor {
function menuitem.constructor {
#[c]object
#[of]:set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
  #echo constructing object ${o} of class ${c}
  typeset i
  for i in type hotkey name prog ; do
    eval "
      newvar ${ov}${i}
      function ${o}.set${i} {
        ${ov}${i}=${q}${d}1${q}
      }
      function ${o}.get${i} {
        eval ${d}1=\\${q}\\${d}{${ov}${i}}\\${q}
      }
    "
  done
  eval "
#[of]:    function ${o}.isselectable {
function ${o}.isselectable {
  [[ ${q}${d}{${ov}type}${q} != ${q}spacer${q} ]]
}
#[cf]
#[of]:    function ${o}.hasprog {
function ${o}.hasprog {
  [[ -n ${q}${d}{${ov}prog}${q} ]]
}
#[cf]
#[of]:    object data
#[cf]
  "
}
#[cf]
#[cf]
#[cf]


#[c]hotkey=a-zA-Z0-9
#[c]type=spacer/toggle/action/menu
#[c]name=
#[c]prog=
#[c]
#[c]main.dir /basepathformenu/
#[c]  the base gets  "ok     exit" all others get "ok    back" unless they are the new base
#[c]title=
#[c]spacer
#[c]name=prog to run with options from menuprog/does not have to exist in path
#[c]name "no options given/or run prog if present in current path"
#[c]dname must exist and must contain a menu.conf file
#[c]name
#[c]main.size
#[c]main.position
#[c]main.open
#[c]main.close
#[c]main.type simple/dirpath
